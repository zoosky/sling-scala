Index: testing/src/test/java/org/apache/sling/launchpad/webapp/integrationtest/Sling475Test.java
===================================================================
--- testing/src/test/java/org/apache/sling/launchpad/webapp/integrationtest/Sling475Test.java	(revision 0)
+++ testing/src/test/java/org/apache/sling/launchpad/webapp/integrationtest/Sling475Test.java	(revision 0)
@@ -0,0 +1,92 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+package org.apache.sling.launchpad.webapp.integrationtest;
+
+
+import java.util.Map;
+import java.util.HashMap;
+
+
+import org.apache.sling.commons.testing.integration.HttpTestBase;
+
+
+
+public class Sling475Test extends HttpTestBase {
+ 
+
+    private String contentUrl;
+
+    private String resourceTypeBar;
+    private String resourceTypeChildOfBar; 
+
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+
+	
+        Map<String,String> props = new HashMap<String,String>();
+
+	resourceTypeBar =  "/bar";
+        props.put("sling:resourceType", resourceTypeBar);
+	contentUrl = testClient.createNode(HTTP_BASE_URL +resourceTypeBar , props);
+
+	resourceTypeChildOfBar = resourceTypeBar + "/childOfBar";
+        props.clear();
+        props.put("sling:resourceType", resourceTypeChildOfBar);
+	
+        testClient.createNode(HTTP_BASE_URL +resourceTypeChildOfBar, props);
+
+
+        uploadTestScript(resourceTypeBar,"html.jsp","html.jsp");	
+        uploadTestScript(resourceTypeBar,"selector.jsp","selector.jsp");
+        uploadTestScript(resourceTypeChildOfBar,"include.jsp","include.html.jsp");
+        uploadTestScript(resourceTypeBar,"replace.jsp","replace.jsp");
+    }
+
+    @Override
+    protected void tearDown() throws Exception {
+        testClient.delete(contentUrl);
+        super.tearDown();
+    }
+    
+   public void testWithSelector() throws Exception {
+
+        final String content = getContent(contentUrl + ".html", CONTENT_TYPE_HTML);
+        assertTrue("Content from include with selector",content.contains("This is selector"));
+        assertTrue("node path from resource bound to selector",content.contains("bar"));
+    }
+
+    public void testWithInclude() throws Exception {
+
+        final String content = getContent(contentUrl + ".html", CONTENT_TYPE_HTML);
+        assertTrue("Content from include without selector",content.contains("This is include without selector"));
+        assertTrue("node path from resource bound to include",content.contains("/childOfBar"));
+    }
+
+    public void testReplace() throws Exception {
+
+        final String content = getContent(contentUrl + ".html", CONTENT_TYPE_HTML);
+        assertTrue("node contains" , content.contains("This is test"));
+        assertTrue("node path from resource bound to include",content.contains("This is selector"));
+    }
+
+    
+}
+
Index: testing/src/test/resources/integration-test/html.jsp
===================================================================
--- testing/src/test/resources/integration-test/html.jsp	(revision 0)
+++ testing/src/test/resources/integration-test/html.jsp	(revision 0)
@@ -0,0 +1,13 @@
+<%@page session="false"%>
+
+<%@taglib prefix="sling" uri="http://sling.apache.org/taglibs/sling/1.0"%>
+
+<sling:defineObjects/>
+
+<sling:include addSelectors="selector"/>
+
+<sling:include path="./childOfBar.include.html" resourceType="/bar/childOfBar" />
+
+<sling:include addSelectors="selector"  replaceSelectors="replace" /> 
+
+
Index: testing/src/test/resources/integration-test/replace.jsp
===================================================================
--- testing/src/test/resources/integration-test/replace.jsp	(revision 0)
+++ testing/src/test/resources/integration-test/replace.jsp	(revision 0)
@@ -0,0 +1,2 @@
+
+<p> This is test </p>
Index: testing/src/test/resources/integration-test/selector.jsp
===================================================================
--- testing/src/test/resources/integration-test/selector.jsp	(revision 0)
+++ testing/src/test/resources/integration-test/selector.jsp	(revision 0)
@@ -0,0 +1,11 @@
+<%@page session="false"%>
+
+<%@taglib prefix="sling" uri="http://sling.apache.org/taglibs/sling/1.0"%>
+
+<sling:defineObjects/>
+
+<h1> This is selector </h1>
+
+<%= currentNode.getPath() %>
+
+
Index: testing/src/test/resources/integration-test/include.jsp
===================================================================
--- testing/src/test/resources/integration-test/include.jsp	(revision 0)
+++ testing/src/test/resources/integration-test/include.jsp	(revision 0)
@@ -0,0 +1,9 @@
+<%@page session="false"%>
+
+<%@taglib prefix="sling" uri="http://sling.apache.org/taglibs/sling/1.0"%>
+
+<sling:defineObjects/>
+
+<h1> This is include without selector </h1>
+
+<%= currentNode.getPath() %>
